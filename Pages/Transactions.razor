@page "/account/{account_id}/transactions"
@attribute [Authorize]
@inject HttpClient Http
@inject IAuthService auth

<h1>Transactions List</h1>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p><a href="/accounts/@(account_id)/transaction/new">Create new transaction</a></p>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Comment</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td><a href="/transactions/edit/@transaction.id">@transaction.name &nbsp;<span class="oi oi-pencil"></span></a></td>
                    <td>@transaction.comment</td>
                    <td>@transaction.amount</td>
                    <td><button @onclick="@(() => DeleteRecord(transaction.id))" class="btn-delete"><span class="oi oi-trash"></span></button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public string? account_id { get; set; }

    private BlazingPennies.Shared.Models.Transaction[] transactions;

    protected async Task Refresh()
    {
        // Show loading spinner while data is being fetched
        transactions = null;
        StateHasChanged();

        string user_id = await auth.CurrentUserId();
        transactions = await Http.GetFromJsonAsync<BlazingPennies.Shared.Models.Transaction[]>($"https://pennypincher.x10.bz/pennydev/transaction/list.php?user_id={user_id}");

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        Refresh();
    }

    private async Task DeleteRecord(string id)
    {
       
            var response = await Http.DeleteAsync($"https://pennypincher.x10.bz/pennydev/transaction/delete.php?id={id}");
            response.EnsureSuccessStatusCode();
            Refresh();
    }

}