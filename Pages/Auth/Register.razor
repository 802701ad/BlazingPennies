@page "/register"
@using System.Net.Http
@using System.Text.Json;
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IConfiguration cfg

<h1>Register</h1>

<EditForm Model="@RegisterRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="first-name">First Name</label>
        <InputText id="first-name" class="form-control" @bind-Value="RegisterRequest.FIRST_NAME" />
        <ValidationMessage For="@(() => RegisterRequest.FIRST_NAME)" />
    </div>
    <div class="form-group">
        <label for="last-name">Last Name</label>
        <InputText id="last-name" class="form-control" @bind-Value="RegisterRequest.LAST_NAME" />
        <ValidationMessage For="@(() => RegisterRequest.LAST_NAME)" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="RegisterRequest.email" />
        <ValidationMessage For="@(() => RegisterRequest.email)" />
    </div>
    <div class="form-group">
        <label for="user-name">User Name</label>
        <InputText id="user-name" class="form-control" @bind-Value="RegisterRequest.UserName" />
        <ValidationMessage For="@(() => RegisterRequest.UserName)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="RegisterRequest.Password" />
        <ValidationMessage For="@(() => RegisterRequest.Password)" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@RegisterRequest.PasswordConfirm" />
        <ValidationMessage For="@(() => RegisterRequest.PasswordConfirm)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
        <div class="alert alert-info">@Message</div>
}
@code {
    public RegisterRequest RegisterRequest { get; set; } = new RegisterRequest();

    public string Message { get; set; }

    private async Task HandleValidSubmit()
    {
        //check if email or user name already exists in the database
        var emailExists = await CheckEmailExists(RegisterRequest.email);
        var userNameExists = await CheckUserNameExists(RegisterRequest.UserName.ToLower());

        if (emailExists)
        {
            Message = "This email is already taken.";
            return;
        }

        if (userNameExists)
        {
            Message = "This user name is already taken.";
            return;
        }

        RegisterRequest.user_id = RegisterRequest.user_id ?? Guid.NewGuid().ToString();

        //call the register.php file using the C# code from the previous conversation
        var values = new Dictionary<string, string>
        {
            { "first_name", RegisterRequest.FIRST_NAME },
            { "last_name", RegisterRequest.LAST_NAME },
            { "email", RegisterRequest.email },
            { "user_name", RegisterRequest.UserName.ToLower() },
            { "password", RegisterRequest.Password },
            { "user_id",  RegisterRequest.user_id}
        };

        var url = Utility.BackendUrl(cfg, "user/register.php");
        var result = await Http.PostAsync(url, new FormUrlEncodedContent(values));

        if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var error = await result.Content.ReadAsStringAsync();
            Message = error;
            return;
        }

        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadAsStringAsync();
            var message = JsonSerializer.Deserialize<Dictionary<string, string>>(response)["message"];
            Message = message;
            navigationManager.NavigateTo("");
            return;
        }

        Message = "Something went wrong. Please try again later.";
    }


    //helper methods to check email and user name existence
    private async Task<bool> CheckEmailExists(string email)
    {
        var values = new Dictionary<string, string>
        {
            { "email", email }
        };
        var result = await Http.PostAsync(Utility.BackendUrl(cfg, "user/check_email.php"), new FormUrlEncodedContent(values));
        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadAsStringAsync();
            var exists = JsonSerializer.Deserialize<Dictionary<string, bool>>(response)["exists"];
            return exists;
        }
        return false;
    }

    private async Task<bool> CheckUserNameExists(string userName)
    {
        var values = new Dictionary<string, string>
        {
            { "user_name", userName }
        };
        string url = Utility.BackendUrl(cfg, "user/check_user.php");
        var result = await Http.PostAsync(url, new FormUrlEncodedContent(values));
        if (result.IsSuccessStatusCode)
        {
            var response = await result.Content.ReadAsStringAsync();
            var exists = JsonSerializer.Deserialize<Dictionary<string, bool>>(response)["exists"];
            return exists;
        }
        return true;
    }
}