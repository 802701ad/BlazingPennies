@*NEW*@
@page "/fund"
@*EDIT*@
@page "/fund/{fund_id}"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager nav
@inject IAuthService auth
@inject IConfiguration cfg

<PageTitle>@(fund_id?.Length > 0 ? "Edit" : "New") Fund</PageTitle>

<h1 id="title">
    @(fund_id?.Length > 0 ? "Edit" : "New") Fund
</h1>

<EditForm OnValidSubmit="OnHandleValidFormSubmit" EditContext="@editContext">
    <label for="inputName">Name:</label>
    <InputText id="inputName" @bind-Value="@fund.name"></InputText>
    <ValidationMessage For="@(() => fund.name)" />
    <label for="inputName">Comments:</label>
    <InputTextArea @bind-Value="@fund.comment"></InputTextArea>
    <div>
    <label for="isActive" style="display:inline">Is Active:</label> <InputCheckbox id="isActive" @bind-Value="@fund.isActive"></InputCheckbox>
    </div>
    <div>
        <ValidationSummary />
    </div>
    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public string? fund_id { get; set; }

    private BlazingPennies.Shared.Models.Fund fund = new();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(fund);
        fund_id ??= "";
        fund.id = fund_id;

        if (fund_id == "")
        {
            fund_id = Guid.NewGuid().ToString();
            fund.is_active = 1;
        }
        else
        {
            string url = Utility.BackendUrl(cfg, "fund/get.php", new {id=fund_id});
            var fund_tmp = await Http.GetFromJsonAsync<BlazingPennies.Shared.Models.Fund>(url);

            if (fund_tmp == null)
            {
                //fund not found
                Utility.NavigateToPath(nav, cfg, "/");
                return;
            }
            fund = fund_tmp;
        }
        fund.id = fund_id;

        fund.user_id = await auth.CurrentUserId();
        
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new ValidationMessageStore(editContext);
    }

    private void HandleValidationRequested(object? sender,
      ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        fund.name ??= "";
        fund.comment ??= "";

        if (fund.name.Trim() == "")
        {
            messageStore?.Add(() => fund.name, "Fund name is required.");
        }

    }

    private async Task OnHandleValidFormSubmit()
    {

        var formContent = new FormUrlEncodedContent(new[]
        {
        new KeyValuePair<string, string>("id", fund.id),
        new KeyValuePair<string, string>("name", fund.name),
        new KeyValuePair<string, string>("comment", fund.comment),
        new KeyValuePair<string, string>("user_id", fund.user_id),
        new KeyValuePair<string, string>("is_active", fund.is_active.ToString())
    });

        string url=Utility.BackendUrl(cfg, "fund/put.php");
        var response = await Http.PostAsync(url, formContent);
        var result = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("STATUS:" + response.StatusCode);
            Console.WriteLine("RESULT:" + result);
            Utility.NavigateToPath(nav, cfg, "/fund/list");
        }
        else
        {
            // Display error message
            Console.WriteLine(result);
        }
    }

}
