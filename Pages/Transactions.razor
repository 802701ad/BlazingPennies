@page "/account/{account_id}/transactions"
@attribute [Authorize]
@inject HttpClient Http
@inject IAuthService auth
@inject IJSRuntime JSRuntime
@inject IConfiguration cfg

<h1>Transactions List</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>
        Balance for Account: @account.name = @string.Format("{0:C}", account.balance)
        <a href="Report/TotalsByFund/@account_id" style="font-size: 60%; margin-left: 2em;">
            Fund Totals
        </a>
    </h2>
    <p><a href="/accounts/@(account_id)/transaction/new">Create new transaction</a></p>
    <div id="transactionDiv" style="height: 70vh; overflow-y: scroll;" @onscroll="@(() => HandleScroll())">
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Date</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var recordIndex = 0;
                }
                @foreach (var transaction in transactions)
                {
                    <tr>
                        <td id="record_@(recordIndex++)"><a href="/transactions/edit/@transaction.id">@transaction.name &nbsp;<span class="oi oi-pencil"></span></a></td>
                        <td>@transaction.date.ToShortDateString()</td>
                        <td>@transaction.amount</td>
                        <td><button @onclick="@(() => DeleteRecord(transaction))" class="btn-delete"><span class="oi oi-trash"></span></button></td>
                    </tr>
                }
        </tbody>
    </table>
    </div>

}

@code {
    [Parameter]
    public string? account_id { get; set; }

    private BlazingPennies.Shared.Models.Account account;

    private BlazingPennies.Shared.Models.Transaction[] transactions;

    private int currentPage = 1;
    private const int pageSize = 100;


    private bool isLoading = false;

    protected async Task Refresh()
    {
        if (isLoading) return;
        isLoading = true;

        StateHasChanged();

        int lastRecordNumber = transactions?.Length??0-1;
        string user_id = await auth.CurrentUserId();
        string url = Utility.BackendUrl(cfg, "transaction/list.php", new {user_id= user_id, account_id=account_id,  page=currentPage.ToString(), pageSize=pageSize.ToString() } );
        string json = await Http.GetStringAsync(url);
        var transactions_to_add = Newtonsoft.Json.JsonConvert.DeserializeObject<BlazingPennies.Shared.Models.Transaction[]>(json);
        if (transactions == null)
        {
            await GetAccountBalance();
            transactions = transactions_to_add;
        }
        else
            transactions=transactions.Concat(transactions_to_add)?.ToArray();
        
        isLoading = false;
        StateHasChanged();

        if (lastRecordNumber > -1) await JSRuntime.InvokeAsync<bool>("ScrollToTransaction", new object[] { lastRecordNumber });

    }


    protected override async Task OnInitializedAsync()
    {
        transactions = null;
        await Refresh();
    }

    private async Task DeleteRecord(BlazingPennies.Shared.Models.Transaction t)
    {
        string id=t.id;
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?\r\n'" + t.name + "'");
        if (!confirmed) return;
        isLoading = true;
        StateHasChanged();
        string url=Utility.BackendUrl(cfg, "transaction/delete.php", new Dictionary<string, string>() { { "id", id } });
        string result = await Http.GetStringAsync(url);
        transactions = null;
        isLoading = false;
        await Refresh();
    }

    private async Task GetAccountBalance()
    {
        string url = Utility.BackendUrl(cfg, "account/get.php?withBalance=true", new Dictionary<string, string>() { { "id", account_id } });
        string json = await Http.GetStringAsync(url);
        account = Newtonsoft.Json.JsonConvert.DeserializeObject<BlazingPennies.Shared.Models.Account>(json);
    }

    private async Task HandleScroll()
    {
        // Check if we are close to the bottom of the container element
        var timeToScroll=await JSRuntime.InvokeAsync<bool>("IsTimeToScrollTransactions", new object[] { });

        if (timeToScroll)
        {
            currentPage++;
            await Refresh();
        }
        
    }
}