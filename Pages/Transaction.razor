@page "/transactions/edit/{transaction_id}"
@page "/accounts/{account_id}/transaction/new"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService auth

<PageTitle>@(isNew ? "New" : "Edit") Transaction</PageTitle>

<h1 id="title">
    @(transaction_id?.Length > 0 ? "Edit" : "New") Transaction
</h1>

<EditForm OnValidSubmit="OnHandleValidFormSubmit" EditContext="@editContext">
     <div class="field">
        <label for="inputDescription">Title:</label>
        <InputText id="inputDescription" @bind-Value="@transaction.name"></InputText>
        <ValidationMessage For="@(() => transaction.name)" />
    </div>
    <div class="field">
       <label for="inputComment">Comments:</label>
       <InputTextArea id="inputComment" @bind-Value="@transaction.comment"></InputTextArea>
       <ValidationMessage For="@(() => transaction.comment)" /> 
    </div>
    <div class="field">
        <label for="inputDate">Date:</label>
        <InputDate id="inputDate" @bind-Value="@transaction.date"></InputDate>
        <ValidationMessage For="@(() => transaction.date)" />
    </div>
    <div class="field">
        <InputCheckbox id="isActive" @bind-Value="@transaction.isActive"></InputCheckbox> <label for="isActive">Active</label>
    </div>
    <h2>Transaction Details</h2>
    <h3>Total: @transaction.amount.ToString("C")</h3>
    <table>
        <thead>
            <tr>
                <th>Description</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detail in transaction.details)
            {
                <tr>
                    <td>@detail.fund_title</td>
                    <td>
                        <InputText Value="@detail.description" ValueChanged="@(e => HandleDetailDescriptionChange(e, detail))" ValueExpression="() => detail.description"></InputText>
                        <span class="tag is-success">@detail.value.ToString("C")</span>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <ValidationSummary />
    <button type="submit" class="button is-primary">Submit</button>
    <button type="button" class="button" @onclick="DuplicateTransaction" disabled="@isNew">Duplicate This Transaction</button>
</EditForm>

@code {
    [Parameter]
    public string? account_id { get; set; }

    [Parameter]
    public string? transaction_id { get; set; }

    public bool isNew { get; set; }

    private BlazingPennies.Shared.Models.Transaction transaction = new();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(transaction);
        isNew = String.IsNullOrEmpty(transaction_id);
        transaction_id ??= Guid.NewGuid().ToString();
        transaction.id = transaction_id;
        transaction.user_id = await auth.CurrentUserId();
        transaction.account_id = account_id??"";


        if (isNew)
        {
            // Get active funds
            var funds = await Http.GetFromJsonAsync<List<BlazingPennies.Shared.Models.Fund>>(Utility.BackendUrl("fund/list.php", new Dictionary<string, string> { { "filter_inactive","true" }, {"user_id", transaction.user_id } }));

            // Prepopulate transaction details with empty entries for every active account
            transaction.details = new List<Shared.Models.TransactionDetail>();
            foreach (var fund in funds)
            {
                transaction.details.Add(new BlazingPennies.Shared.Models.TransactionDetail
                    {
                        account_id = account_id,
                        transaction_id = transaction_id,
                        fund_title = fund.name,
                        fund_id = fund.id,
                        value = 0,
                        description = ""
                    });
            }
        }
        else
        {
            string url= Utility.BackendUrl("transaction/get.php", new Dictionary<string, string> { { "id", transaction_id }, { "user_id", transaction.user_id } });
            //string json = await Http.GetStringAsync(url);
            var transaction_tmp = await Http.GetFromJsonAsync<BlazingPennies.Shared.Models.Transaction>(url);


            if (transaction_tmp == null)
            {
                //transaction not found
                NavigationManager.NavigateTo($"/account/{System.Web.HttpUtility.UrlEncode(account_id)}", true);
                return;
            }
            transaction = transaction_tmp;

        }
        transaction.id = transaction_id;

        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new ValidationMessageStore(editContext);
    }

    private void HandleValidationRequested(object? sender,
      ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();


    }

    private async Task OnHandleValidFormSubmit()
    {
        var transactionDetailsJson = System.Text.Json.JsonSerializer.Serialize(transaction.details);

        var transactionFormContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("id", transaction.id),
            new KeyValuePair<string, string>("user_id", transaction.user_id),
            new KeyValuePair<string, string>("account_id", transaction.account_id),
            new KeyValuePair<string, string>("name", transaction.name),
            new KeyValuePair<string, string>("date",  transaction.date.ToString()),
            new KeyValuePair<string, string>("seq",  transaction.seq),
            new KeyValuePair<string, string>("amount", transaction.amount.ToString()),
            new KeyValuePair<string, string>("comment", transaction.comment),
            new KeyValuePair<string, string>("details", transactionDetailsJson),
    });

        var transactionUrl = Utility.BackendUrl("./transaction/put.php");
        var transactionResponse = await Http.PostAsync(transactionUrl, transactionFormContent);
        var transactionResult = await transactionResponse.Content.ReadAsStringAsync();

        if (!transactionResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("ERROR:" + transactionResult);
        }
        else 
        {
            NavigationManager.NavigateTo($"/account/{System.Web.HttpUtility.UrlEncode(transaction.account_id)}/transactions", true);
        }
    }


    private void HandleDetailDescriptionChange(string value, BlazingPennies.Shared.Models.TransactionDetail detail)
    {
        detail.description = value;
        detail.value  = Utility.SumNumbers(detail.description);
        transaction.amount = transaction.details.Sum(detail => Convert.ToDecimal(detail.value));
        editContext?.NotifyValidationStateChanged();
        StateHasChanged();
    }

    private async Task DuplicateTransaction()
    {

        transaction.id = Guid.NewGuid().ToString();

        transaction.date = DateTime.Now;

        isNew = true;

    }

}